//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Lottery.LotteryServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameSettingsDTO", Namespace="http://schemas.datacontract.org/2004/07/Contracts.DTOs")]
    [System.SerializableAttribute()]
    public partial class GameSettingsDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPrivateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MaxPlayersField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPrivate {
            get {
                return this.IsPrivateField;
            }
            set {
                if ((this.IsPrivateField.Equals(value) != true)) {
                    this.IsPrivateField = value;
                    this.RaisePropertyChanged("IsPrivate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxPlayers {
            get {
                return this.MaxPlayersField;
            }
            set {
                if ((this.MaxPlayersField.Equals(value) != true)) {
                    this.MaxPlayersField = value;
                    this.RaisePropertyChanged("MaxPlayers");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserRegisterDTO", Namespace="http://schemas.datacontract.org/2004/07/Contracts.DTOs")]
    [System.SerializableAttribute()]
    public partial class UserRegisterDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdAvatarField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MaternalLastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NicknameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PaternalLastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime RegistrationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ScoreField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdAvatar {
            get {
                return this.IdAvatarField;
            }
            set {
                if ((this.IdAvatarField.Equals(value) != true)) {
                    this.IdAvatarField = value;
                    this.RaisePropertyChanged("IdAvatar");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdUser {
            get {
                return this.IdUserField;
            }
            set {
                if ((this.IdUserField.Equals(value) != true)) {
                    this.IdUserField = value;
                    this.RaisePropertyChanged("IdUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MaternalLastName {
            get {
                return this.MaternalLastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MaternalLastNameField, value) != true)) {
                    this.MaternalLastNameField = value;
                    this.RaisePropertyChanged("MaternalLastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Nickname {
            get {
                return this.NicknameField;
            }
            set {
                if ((object.ReferenceEquals(this.NicknameField, value) != true)) {
                    this.NicknameField = value;
                    this.RaisePropertyChanged("Nickname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PaternalLastName {
            get {
                return this.PaternalLastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PaternalLastNameField, value) != true)) {
                    this.PaternalLastNameField = value;
                    this.RaisePropertyChanged("PaternalLastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime RegistrationDate {
            get {
                return this.RegistrationDateField;
            }
            set {
                if ((this.RegistrationDateField.Equals(value) != true)) {
                    this.RegistrationDateField = value;
                    this.RaisePropertyChanged("RegistrationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Score {
            get {
                return this.ScoreField;
            }
            set {
                if ((this.ScoreField.Equals(value) != true)) {
                    this.ScoreField = value;
                    this.RaisePropertyChanged("Score");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserProfileDTO", Namespace="http://schemas.datacontract.org/2004/07/Contracts.DTOs")]
    [System.SerializableAttribute()]
    public partial class UserProfileDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LotteryServiceReference.ILotteryService")]
    public interface ILotteryService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/SendMessage")]
        void SendMessage(string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/SendMessage")]
        System.Threading.Tasks.Task SendMessageAsync(string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendService/SendRequestFriendship", ReplyAction="http://tempuri.org/IFriendService/SendRequestFriendshipResponse")]
        void SendRequestFriendship(int targetUserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendService/SendRequestFriendship", ReplyAction="http://tempuri.org/IFriendService/SendRequestFriendshipResponse")]
        System.Threading.Tasks.Task SendRequestFriendshipAsync(int targetUserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendService/AddFriend", ReplyAction="http://tempuri.org/IFriendService/AddFriendResponse")]
        void AddFriend(int requesterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendService/AddFriend", ReplyAction="http://tempuri.org/IFriendService/AddFriendResponse")]
        System.Threading.Tasks.Task AddFriendAsync(int requesterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendService/RemoveFriend", ReplyAction="http://tempuri.org/IFriendService/RemoveFriendResponse")]
        void RemoveFriend(int friendUserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendService/RemoveFriend", ReplyAction="http://tempuri.org/IFriendService/RemoveFriendResponse")]
        System.Threading.Tasks.Task RemoveFriendAsync(int friendUserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/StartGame", ReplyAction="http://tempuri.org/IGameService/StartGameResponse")]
        void StartGame();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/StartGame", ReplyAction="http://tempuri.org/IGameService/StartGameResponse")]
        System.Threading.Tasks.Task StartGameAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/UpdateGameSettings", ReplyAction="http://tempuri.org/IGameService/UpdateGameSettingsResponse")]
        void UpdateGameSettings(Lottery.LotteryServiceReference.GameSettingsDTO settings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/UpdateGameSettings", ReplyAction="http://tempuri.org/IGameService/UpdateGameSettingsResponse")]
        System.Threading.Tasks.Task UpdateGameSettingsAsync(Lottery.LotteryServiceReference.GameSettingsDTO settings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/GetScoreboard", ReplyAction="http://tempuri.org/IGameService/GetScoreboardResponse")]
        void GetScoreboard();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/GetScoreboard", ReplyAction="http://tempuri.org/IGameService/GetScoreboardResponse")]
        System.Threading.Tasks.Task GetScoreboardAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyService/CreateLobby", ReplyAction="http://tempuri.org/ILobbyService/CreateLobbyResponse")]
        string CreateLobby();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyService/CreateLobby", ReplyAction="http://tempuri.org/ILobbyService/CreateLobbyResponse")]
        System.Threading.Tasks.Task<string> CreateLobbyAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyService/JoinLobby", ReplyAction="http://tempuri.org/ILobbyService/JoinLobbyResponse")]
        void JoinLobby(string lobbyCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyService/JoinLobby", ReplyAction="http://tempuri.org/ILobbyService/JoinLobbyResponse")]
        System.Threading.Tasks.Task JoinLobbyAsync(string lobbyCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/LoginUser", ReplyAction="http://tempuri.org/IAuthenticationService/LoginUserResponse")]
        bool LoginUser(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/LoginUser", ReplyAction="http://tempuri.org/IAuthenticationService/LoginUserResponse")]
        System.Threading.Tasks.Task<bool> LoginUserAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/LogoutUser", ReplyAction="http://tempuri.org/IAuthenticationService/LogoutUserResponse")]
        void LogoutUser();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/LogoutUser", ReplyAction="http://tempuri.org/IAuthenticationService/LogoutUserResponse")]
        System.Threading.Tasks.Task LogoutUserAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/RegisterUser", ReplyAction="http://tempuri.org/IUserService/RegisterUserResponse")]
        int RegisterUser(Lottery.LotteryServiceReference.UserRegisterDTO userData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/RegisterUser", ReplyAction="http://tempuri.org/IUserService/RegisterUserResponse")]
        System.Threading.Tasks.Task<int> RegisterUserAsync(Lottery.LotteryServiceReference.UserRegisterDTO userData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/RegisterGuest", ReplyAction="http://tempuri.org/IUserService/RegisterGuestResponse")]
        int RegisterGuest();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/RegisterGuest", ReplyAction="http://tempuri.org/IUserService/RegisterGuestResponse")]
        System.Threading.Tasks.Task<int> RegisterGuestAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/ChangePassword", ReplyAction="http://tempuri.org/IUserService/ChangePasswordResponse")]
        bool ChangePassword(int currentUserId, string oldPassword, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/ChangePassword", ReplyAction="http://tempuri.org/IUserService/ChangePasswordResponse")]
        System.Threading.Tasks.Task<bool> ChangePasswordAsync(int currentUserId, string oldPassword, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/RecoverPassword", ReplyAction="http://tempuri.org/IUserService/RecoverPasswordResponse")]
        void RecoverPassword(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/RecoverPassword", ReplyAction="http://tempuri.org/IUserService/RecoverPasswordResponse")]
        System.Threading.Tasks.Task RecoverPasswordAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/UpdateProfile", ReplyAction="http://tempuri.org/IUserService/UpdateProfileResponse")]
        bool UpdateProfile(int currentUserId, Lottery.LotteryServiceReference.UserProfileDTO profileData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/UpdateProfile", ReplyAction="http://tempuri.org/IUserService/UpdateProfileResponse")]
        System.Threading.Tasks.Task<bool> UpdateProfileAsync(int currentUserId, Lottery.LotteryServiceReference.UserProfileDTO profileData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVerificationService/SendVerificationCode", ReplyAction="http://tempuri.org/IVerificationService/SendVerificationCodeResponse")]
        bool SendVerificationCode(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVerificationService/SendVerificationCode", ReplyAction="http://tempuri.org/IVerificationService/SendVerificationCodeResponse")]
        System.Threading.Tasks.Task<bool> SendVerificationCodeAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVerificationService/VerifyCode", ReplyAction="http://tempuri.org/IVerificationService/VerifyCodeResponse")]
        bool VerifyCode(string email, string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVerificationService/VerifyCode", ReplyAction="http://tempuri.org/IVerificationService/VerifyCodeResponse")]
        System.Threading.Tasks.Task<bool> VerifyCodeAsync(string email, string code);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILotteryServiceChannel : Lottery.LotteryServiceReference.ILotteryService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LotteryServiceClient : System.ServiceModel.ClientBase<Lottery.LotteryServiceReference.ILotteryService>, Lottery.LotteryServiceReference.ILotteryService {
        
        public LotteryServiceClient() {
        }
        
        public LotteryServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LotteryServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LotteryServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LotteryServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void SendMessage(string message) {
            base.Channel.SendMessage(message);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(string message) {
            return base.Channel.SendMessageAsync(message);
        }
        
        public void SendRequestFriendship(int targetUserId) {
            base.Channel.SendRequestFriendship(targetUserId);
        }
        
        public System.Threading.Tasks.Task SendRequestFriendshipAsync(int targetUserId) {
            return base.Channel.SendRequestFriendshipAsync(targetUserId);
        }
        
        public void AddFriend(int requesterId) {
            base.Channel.AddFriend(requesterId);
        }
        
        public System.Threading.Tasks.Task AddFriendAsync(int requesterId) {
            return base.Channel.AddFriendAsync(requesterId);
        }
        
        public void RemoveFriend(int friendUserId) {
            base.Channel.RemoveFriend(friendUserId);
        }
        
        public System.Threading.Tasks.Task RemoveFriendAsync(int friendUserId) {
            return base.Channel.RemoveFriendAsync(friendUserId);
        }
        
        public void StartGame() {
            base.Channel.StartGame();
        }
        
        public System.Threading.Tasks.Task StartGameAsync() {
            return base.Channel.StartGameAsync();
        }
        
        public void UpdateGameSettings(Lottery.LotteryServiceReference.GameSettingsDTO settings) {
            base.Channel.UpdateGameSettings(settings);
        }
        
        public System.Threading.Tasks.Task UpdateGameSettingsAsync(Lottery.LotteryServiceReference.GameSettingsDTO settings) {
            return base.Channel.UpdateGameSettingsAsync(settings);
        }
        
        public void GetScoreboard() {
            base.Channel.GetScoreboard();
        }
        
        public System.Threading.Tasks.Task GetScoreboardAsync() {
            return base.Channel.GetScoreboardAsync();
        }
        
        public string CreateLobby() {
            return base.Channel.CreateLobby();
        }
        
        public System.Threading.Tasks.Task<string> CreateLobbyAsync() {
            return base.Channel.CreateLobbyAsync();
        }
        
        public void JoinLobby(string lobbyCode) {
            base.Channel.JoinLobby(lobbyCode);
        }
        
        public System.Threading.Tasks.Task JoinLobbyAsync(string lobbyCode) {
            return base.Channel.JoinLobbyAsync(lobbyCode);
        }
        
        public bool LoginUser(string username, string password) {
            return base.Channel.LoginUser(username, password);
        }
        
        public System.Threading.Tasks.Task<bool> LoginUserAsync(string username, string password) {
            return base.Channel.LoginUserAsync(username, password);
        }
        
        public void LogoutUser() {
            base.Channel.LogoutUser();
        }
        
        public System.Threading.Tasks.Task LogoutUserAsync() {
            return base.Channel.LogoutUserAsync();
        }
        
        public int RegisterUser(Lottery.LotteryServiceReference.UserRegisterDTO userData) {
            return base.Channel.RegisterUser(userData);
        }
        
        public System.Threading.Tasks.Task<int> RegisterUserAsync(Lottery.LotteryServiceReference.UserRegisterDTO userData) {
            return base.Channel.RegisterUserAsync(userData);
        }
        
        public int RegisterGuest() {
            return base.Channel.RegisterGuest();
        }
        
        public System.Threading.Tasks.Task<int> RegisterGuestAsync() {
            return base.Channel.RegisterGuestAsync();
        }
        
        public bool ChangePassword(int currentUserId, string oldPassword, string newPassword) {
            return base.Channel.ChangePassword(currentUserId, oldPassword, newPassword);
        }
        
        public System.Threading.Tasks.Task<bool> ChangePasswordAsync(int currentUserId, string oldPassword, string newPassword) {
            return base.Channel.ChangePasswordAsync(currentUserId, oldPassword, newPassword);
        }
        
        public void RecoverPassword(string email) {
            base.Channel.RecoverPassword(email);
        }
        
        public System.Threading.Tasks.Task RecoverPasswordAsync(string email) {
            return base.Channel.RecoverPasswordAsync(email);
        }
        
        public bool UpdateProfile(int currentUserId, Lottery.LotteryServiceReference.UserProfileDTO profileData) {
            return base.Channel.UpdateProfile(currentUserId, profileData);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateProfileAsync(int currentUserId, Lottery.LotteryServiceReference.UserProfileDTO profileData) {
            return base.Channel.UpdateProfileAsync(currentUserId, profileData);
        }
        
        public bool SendVerificationCode(string email) {
            return base.Channel.SendVerificationCode(email);
        }
        
        public System.Threading.Tasks.Task<bool> SendVerificationCodeAsync(string email) {
            return base.Channel.SendVerificationCodeAsync(email);
        }
        
        public bool VerifyCode(string email, string code) {
            return base.Channel.VerifyCode(email, code);
        }
        
        public System.Threading.Tasks.Task<bool> VerifyCodeAsync(string email, string code) {
            return base.Channel.VerifyCodeAsync(email, code);
        }
    }
}
